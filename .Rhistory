print(fact)
if (num < 0) {
print("Sorry no factorial for the number")
} else if(num == 0) {
print("Factorial is 1")
}else{
for(i in 1:num){
factorial = factorial * i
}
print(paste("the factorial of", num, "is", factorial))
}
?input
??input
usr_input = readline(prompt = "Input number: ")
num = as.integer(usr_input)
usr_input = readline(prompt = "Input number: ")
factorial = 1
if (num < 0) {
print("Sorry no factorial for the number")
} else if(num == 0) {
print("Factorial is 1")
}else{
for(i in 1:num){
factorial = factorial * i
}
print(paste("the factorial of", num, "is", factorial))
}
usr_input = readline(prompt = "Input number: ")
factorial = 1
if (num < 0) {
print("Sorry no factorial for the number")
} else if(num == 0) {
print("Factorial is 1")
}else{
for(i in 1:num){
factorial = factorial * i
}
print(paste("the factorial of", num, "is", factorial))
}
usr_input = readline(prompt = "Input number: ")
factorial = 1
if (num < 0) {
print("Sorry no factorial for the number")
} else if(num == 0) {
print("Factorial is 1")
}else{
for(i in 1:num){
factorial = factorial * i
}
print(paste("the factorial of", num, "is", factorial))
}
usr_input = readline(prompt = "Input number: ")
factorial = 1
if (num < 0) {
print("Sorry no factorial for the number")
} else if(num == 0) {
print("Factorial is 1")
}else{
for(i in 1:num){
factorial = factorial * i
}
print(paste("the factorial of", num, "is", factorial))
}
usr_input = readline(prompt = "Input number: ")
num = as.integer(usr_input)
factorial = 1
if (num < 0) {
print("Sorry no factorial for the number")
} else if(num == 0) {
print("Factorial is 1")
}else{
for(i in 1:num){
factorial = factorial * i
}
print(paste("the factorial of", num, "is", factorial))
}
usr_input = readline(prompt = "Input number: ")
factorial = 1
if (num < 0) {
print("Sorry no factorial for the number")
} else if(num == 0) {
print("Factorial is 1")
}else{
for(i in 1:num){
factorial = factorial * i
}
print(paste("the factorial of", num, "is", factorial))
}
source("C:/Users/geord/Desktop/R/R scripts/Factorial.R", echo=TRUE)
source("C:/Users/geord/Desktop/R/R scripts/Factorial.R", echo=TRUE)
source("C:/Users/geord/Desktop/R/R scripts/Factorial.R", echo=TRUE)
source("C:/Users/geord/Desktop/R/R scripts/Factorial.R", echo=TRUE)
source("C:/Users/geord/Desktop/R/R scripts/Factorial.R", echo=TRUE)
source("C:/Users/geord/Desktop/R/R scripts/Normal.R", echo=TRUE)
x <- seq(0,10,0.01)
f <- pgamma(x,shape=9,rate=2)
y <- dgamma(x,shape=9,rate=2)
plot(y, size=0.5)
plot(y)
source("C:/Users/geord/Desktop/R/R scripts/Normal.R", echo=TRUE)
view(df)
View(df)
f[2]==f[1]+y[1]
f[2]==f[1]+y[2]
all.equal(f[2],f[1]+y[2])
all.equal(f[73],f[72]+y[73])
f[3]==sum(x[1,2])
f[3]==sum(x[1],x[2])
f[3]==sum(x[1:3])
all.equal(f[3],sum(x[1:3])
)
all.equal(f[3],sum(y[1:3])
)
plot(x,y, type="l", xaxt="n", yaxt="n"); axis(2, at= c(100-3*sd, 100-2*sd, 100-sd,100+sd,100+2*sd,100+3*sd))
plot(x,y, type="l", xaxt="n", yaxt="n"); axis(x, at= c(100-3*sd, 100-2*sd, 100-sd,100+sd,100+2*sd,100+3*sd))
plot(x,y, type="l", xaxt="n", yaxt="n"); axis(1, at= c(100-3*sd, 100-2*sd, 100-sd,100+sd,100+2*sd,100+3*sd))
?plot
plot(x,y, type="l", xaxt="p", yaxt="n"); axis(1, at= c(100-3*sd, 100-2*sd, 100-sd,100+sd,100+2*sd,100+3*sd))
plot(x,y, type="l", yaxt="n"); axis(1, at= c(100-3*sd, 100-2*sd, 100-sd,100+sd,100+2*sd,100+3*sd))
plot(x,y, type="l", xaxt= "y", yaxt="n"); axis(1, at= c(100-3*sd, 100-2*sd, 100-sd,100+sd,100+2*sd,100+3*sd))
plot(x,y, type="l", xaxt= "n", yaxt="n"); axis(1, at= c(100-3*sd, 100-2*sd, 100-sd,100+sd,100+2*sd,100+3*sd))
plot(x,y, type="l", xaxt= 3, yaxt="n"); axis(1, at= c(100-3*sd, 100-2*sd, 100-sd,100+sd,100+2*sd,100+3*sd))
plot(x,y, type="l", xaxt= 'n', yaxt="n"); axis(1, at= c(100-3*sd, 100-2*sd, 100-sd,100+sd,100+2*sd,100+3*sd))
?solve
styler:::set_style_transformers()
styler:::set_style_transformers()
styler:::set_style_transformers()
data <- read.csv("~/Downloads/cancer data.csv")
str(data)
data <- read.csv("~/Downloads/cancer data.csv", sep = c(";", "__"))
str(data)
head(data)
data <- read.csv("~/Downloads/cancer data.csv", sep = c(";"))
data <- read.csv("~/Downloads/cancer data.csv", sep = c(";", "__"))
data <- read.csv("~/Downloads/cancer data.csv", sep = c(";", "\_\_"))
data <- read.csv("~/Downloads/cancer data.csv", sep = c(";", "__"))
data <- read.csv("~/Downloads/cancer data.csv", sep = c(";", "k__bacteria."))
data
data <- read.csv("~/Downloads/cancer data.csv", sep = c(";", "k__Bacteria."))
data <- read.csv("~/Downloads/cancer data.csv", sep = c(";", k__Bacteria.p"))
data <- read.csv("~/Downloads/cancer data.csv", sep = c("k__Bacteria.p"))
data <- read.csv("~/Downloads/cancer data.csv", sep = "k__Bacteria.p")
data <- read.csv("~/Downloads/cancer data.csv", sep = "k")
data
library(fpp3)
#Multiple seasonal periods
vic_elec |> gg_season(Demand, period = "day") +
theme(legend.position = "none") +
labs(y="MWh", title="Electricity demand: Victoria")
vic_elec |> gg_season(Demand, period = "week") +
theme(legend.position = "none") +
labs(y="MWh", title="Electricity demand: Victoria")
vic_elec |> gg_season(Demand, period = "year") +
labs(y="MWh", title="Electricity demand: Victoria")
scan("deaths.txt")
scan("./time_series_module/deaths.txt")
scan("./time_series_module/deaths.txt", skip = 4)
deaths <- scan("./time_series_module/deaths.txt", skip = 4)
deaths |> ts()
deaths |> ts(start=c(1999, 1))
deaths <- scan("./time_series_module/deaths.txt", skip = 4)
deaths |> ts(start=c(1999, 1))
deaths |> ts(start=c(1999, 1), frequency = 4)
deaths |> ts(start=c(1990, 1), frequency = 4)
deaths |> ts(start=2003, frequency = 12)
monthplot(deaths)
month(1:12)
month(1:12, label=TRUE)
monthplot(deaths, labels = month(1:12, label=TRUE))
monthplot(deaths, labels = month(1:12, label=TRUE), ylab = "Num of deaths")
monthplot(deaths, labels = month(1:12, label=TRUE), ylab = "Number of deaths")
quarterly <- aggregate(deaths, nfrequency=4)
quarterly <- aggregate(~deaths, nfrequency=4)
quarterly <- aggregate(x = deaths, nfrequency=4)
quarterly <- aggregate(deaths~Qtr, nfrequency=4)
str(deaths)
deaths |> ts(start=2003, frequency = 12) -> deaths
str(deaths)
quarterly <- aggregate(deaths, nfrequency=4)
monthplot(deaths, labels = month(1:12, label=TRUE), ylab = "Number of deaths")
quarterly <- aggregate(deaths, nfrequency=4)
quarterly
deaths
plot(deaths)
library(fpp3) #Here comes the big boii
deaths %>% tsibble()
as_tsibble(deaths)
deaths %>% gg_season()
deaths <- as_tsibble(deaths)
deaths %>% gg_season()
deaths %>% gg_season(xlab = "Months", ylab = "Deaths", title = "Number of deaths per month")
deaths %>% gg_season(labels = c("Months", "Deaths"), title = "Number of deaths per month")
deaths %>% gg_season(labels = "Deaths", title = "Number of deaths per month")
deaths %>% gg_season(value, period = year) +
labs(x = "Months",
y = "Deaths",
title = "Number of deaths per month") +
a
deaths %>% gg_season(value, period = year) +
labs(x = "Months",
y = "Deaths",
title = "Number of deaths per month")
deaths %>% gg_season(value, period = "year") +
labs(x = "Months",
y = "Deaths",
title = "Number of deaths per month")
deaths %>% gg_season(value, period = "week") +
labs(x = "Months",
y = "Deaths",
title = "Number of deaths per month")
deaths %>% gg_season(value) +
labs(x = "Months",
y = "Deaths",
title = "Number of deaths per month")
deaths <-  scan("./time_series_module/deaths.txt", skip = 4)
deaths |> ts(start = 2003, frequency = 12) -> deaths
monthplot(deaths, labels = month(1:12, label = TRUE), ylab = "Number of deaths")
plot(deaths) #Honestly the default plot is kinda shaite
quarterly <- aggregate(deaths, nfrequency = 4)
quarterly
deaths
library(fpp3) #Here comes the big boii
deaths <- as_tsibble(deaths)
deaths %>% gg_season(value) +
labs(x = "Months",
y = "Deaths",
title = "Number of deaths per month")
library(fpp3)
a10 |>
gg_subseries(Cost) +
labs(
y = "$ (millions)",
title = "Australian antidiabetic drug sales"
)
PBS
head(PBS)
if(!exists(PBS)) { library(fpp3) }
exists(PBS)
exists(ggplot())
exists(deaths""
exists(deaths)
exists("deaths")
exists("a")
exists("PBS")
exists("PBS")
exists("PB")
unload(PBS)
unloadNamespace(PBS)
unloadNamespace(PBS)
exists("PB")
exists("PBS")
detach(PBS)
detach("PBS")
detach(fpp3)
rm("PBS")
rm(PBS)
rm(fpp3)
PBS
rm("fpp3")
rm("package::fpp3")
detach("package::fpp3")
detach("package::base")
search()
detach("package:tsibbledata")
PBS
exists("PBS")
if(!exists("PBS")) { library(tsibbledata) }
PBS
head(PBS)
PBS |>
filter(ATC2 == "A10")
PBS |>
filter(ATC2 == "A10") |>
select(Month, Concession, Type, Cost) |>
summarise(TotalC = sum(Cost)) |>
mutate(Cost = TotalC / 1e6)
PBS |>
filter(ATC2 == "A10") |>
select(Month, Concession, Type, Cost) |>
summarise(TotalC = sum(Cost)) |>
mutate(Cost = TotalC / 1e6) -> a10
source("./time_series_module/a10.R")
## gg_subseries
a10 |>
gg_subseries(Cost) +
labs(
y = "$ (millions)",
title = "Australian antidiabetic drug sales"
)
## gg_subseries
a10 |>
gg_subseries(Cost) +
labs(
y = "$ (millions)",
title = "Australian antidiabetic drug sales"
)
source("./time_series_module/a10.R")
library(fpp3)
## gg_subseries
a10 |>
gg_subseries(Cost) +
labs(
y = "$ (millions)",
title = "Australian antidiabetic drug sales"
)
gg_season(holidays, Trips) +
.
gg_season(holidays, Trips) +
gg_season(holidays, Trips) +
require(stats); require(graphics)
summary(anscombe)
op <- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))
for(i in 1:4) {
ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
plot(ff, data = anscombe, col = "red", pch = 21, bg = "orange", cex = 1.2,
xlim = c(3, 19), ylim = c(3, 13))
abline(mods[[i]], col = "blue")
}
ff <- y ~ x
op <- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))
for(i in 1:4) {
ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
plot(ff, data = anscombe, col = "red", pch = 21, bg = "orange", cex = 1.2,
xlim = c(3, 19), ylim = c(3, 13))
abline(mods[[i]], col = "blue")
}
mtext("Anscombe's 4 Regression data sets", outer = TRUE, cex = 1.5)
par(op)
for(i in 1:4) {
ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
plot(ff, data = anscombe, col = "red", pch = 21, bg = "orange", cex = 1.2,
xlim = c(3, 19), ylim = c(3, 13))
abline(mods[[i]], col = "blue")
}
mods <- setNames(as.list(1:4), paste0("lm", 1:4))
for(i in 1:4) {
ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
## or   ff[[2]] <- as.name(paste0("y", i))
##      ff[[3]] <- as.name(paste0("x", i))
mods[[i]] <- lmi <- lm(ff, data = anscombe)
print(anova(lmi))
}
## See how close they are (numerically!)
sapply(mods, coef)
lapply(mods, function(fm) coef(summary(fm)))
op <- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))
for(i in 1:4) {
ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
plot(ff, data = anscombe, col = "red", pch = 21, bg = "orange", cex = 1.2,
xlim = c(3, 19), ylim = c(3, 13))
abline(mods[[i]], col = "blue")
}
mtext("Anscombe's 4 Regression data sets", outer = TRUE, cex = 1.5)
par(op)
?par
for(i in 1:4) {
ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
plot(ff, data = anscombe, col = "red", pch = 21, bg = "orange", cex = 1.2,
xlim = c(3, 19), ylim = c(3, 13))
abline(mods[[i]], col = "blue")
}
mtext("Anscombe's 4 Regression data sets", outer = TRUE, cex = 1.5)
par(op)
for(i in 1:4) {
ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
plot(ff, data = anscombe, col = "red", pch = 21, bg = "orange", cex = 1.2,
xlim = c(3, 19), ylim = c(3, 13))
abline(mods[[i]], col = "blue")
}
op <- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))
for(i in 1:4) {
ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
plot(ff, data = anscombe, col = "red", pch = 21, bg = "orange", cex = 1.2,
xlim = c(3, 19), ylim = c(3, 13))
abline(mods[[i]], col = "blue")
}
mtext("Anscombe's 4 Regression data sets", outer = TRUE, cex = 1.5)
par(op)
visitors <- tourism |>
group_by(State) |>
summarise(Trips = sum(Trips))
visitors |>
ggplot(aes(x = Quarter, y = Trips)) +
geom_line() +
facet_grid(vars(State), scales = "free_y") +
labs(title = "Australian domestic tourism",
y= "Overnight trips ('000)")
visitors |>
pivot_wider(values_from=Trips, names_from=State) |>
GGally::ggpairs(columns = 2:9)
## LAG PLOTS
recent_production <- aus_production |>
filter(year(Quarter) >= 2000)
recent_production |>
gg_lag(Beer, geom = "point") +
labs(x = "lag(Beer, k)")
